<html>
  <head>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.6.0/Chart.js"></script>
    <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/css/bootstrap.min.css">
    <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.2/js/bootstrap.min.js"></script>
    <script src="https://use.fontawesome.com/718410bc64.js"></script>
    <script src="../javascript/sendHttpRequest.js"></script>
  </head>
  <body>
    <h1 style="text-align: center"><%= videoName %></h1>
    <div style="display: -webkit-flex; display: flex;">
      <div>
        <video id="presentation_video" width="800" height="450" controls>
          <source src="../videos/<%= videoName %>" type="video/mp4">
        </video>
        <hr>
        <canvas id="feedbackChart" width="600" height="100"></canvas>
      </div>
      <div style="height: 560px; margin-left: 20px; margin-right: 20px; -webkit-flex: 1; flex: 1; position: relative;">
        <ul id="feedback_prompt_question_tab" class="nav nav-pills" style="display: -webkit-flex; display: flex;">
          <li role="presentation" class="active" style="-webkit-flex: 1; flex: 1;">
            <a href="#feedback_list" aria-controls="feedback_list" role="tab" data-toggle="pill" style="text-align: center">Feedback</a></li>
          <li role="presentation" style="-webkit-flex: 1; flex: 1;">
            <a href="#prompt_list" aria-controls="prompt_list" role="tab" data-toggle="pill" style="text-align: center">Prompt</a></li>
          <li role="presentation" style="-webkit-flex: 1; flex: 1;">
            <a href="#question_list" aria-controls="question_list" role="tab" data-toggle="pill" style="text-align: center">Question</a></li>
        </ul>
        <div class="tab-content" style="width: 100%; height: 100%; position: absolute; border: 1px #337ab7 solid">
          <div role="tabpanel" class="tab-pane active" id="feedback_list">helo</div>
          <div role="tabpanel" class="tab-pane" id="prompt_list">
            <div style="text-align: center">
              <button type="button" class="btn btn-primary btn-lg" style="display: inline-block; margin-top: 20px; margin-bottom: 20px" data-toggle="modal" data-target="#new_prompt_modal">+</button>
            </div>
            <div id="prompt_list_body">
            </div>
          </div>
          <div role="tabpanel" class="tab-pane" id="question_list">helo</div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="new_prompt_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" style="text-align: center">Create new prompt</h4>
          </div>
          <div class="modal-body">
            <ul id="new_prompt_type_tab" class="nav nav-pills" style="display: -webkit-flex; display: flex;">
              <li id="custom_question_tab" role="presentation" class="active" style="-webkit-flex: 1; flex: 1;">
                <a href="#custom_question_form" aria-controls="custom_question_form" role="tab" data-toggle="pill" style="text-align: center;">Custom question</a>
              </li>
            </ul>
            <div class="tab-content">
              <div role="tabpanel" class="tab-pane active" id="custom_question_form" style="margin-top: 20px">
                <form>
                  <div class="form-group">
                    <label for="custom_question_prompt_time">Time to pop up</label>
                    <div class="input-group">
                      <input type="number" min="0" max="59" class="form-control" id="custom_question_prompt_time_min" placeholder="0">
                      <div class="input-group-addon">:</div>
                      <input type="number" min="0" max="59" class="form-control" id="custom_question_prompt_time_sec" placeholder="00">
                    </div>
                  </div>
                  <div class="form-group">
                    <label for="custom_question_prompt_question">Question</label>
                    <input type="text" class="form-control" id="custom_question_prompt_question" placeholder="Type your question">
                  </div>
                </form>
              </div>
              <div role="tabpanel" class="tab-pane" id="ab_testing_form">
                hello
              </div>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="button" id="new_prompt_submit_btn" class="btn btn-primary" data-dismiss="modal">Submit</button>
          </div>
        </div>
      </div>
    </div>
    <div class="modal fade" id="new_notification_modal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            <h4 class="modal-title" style="text-align: center">Send Question for Feedback</h4>
          </div>
          <div class="modal-body" style="">
            <p style="display: inline-block">Send question to:</p>
            <p id="target_feedback" style="display: inline-block"></p>
            <div class="input-group" style="">
              <span class="input-group-addon" id="question_addon">Q. </span>
              <input type="text" id="new_question" class="form-control" aria-describedby="question_addon"></input>
            </div>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
            <button type="button" id="new_notification_submit_btn" class="btn btn-primary" data-dismiss="modal">Submit</button>
          </div>
        </div>
      </div>
    </div>
    <script>
      /* define server url */
      // let server_url = '192.168.0.149:3000';
      let server_url = 'emma.kaist.ac.kr:3000';
    </script>
    <script type="text/javascript">
      /* initialize feedback tab */
      let videoElement = document.getElementById('presentation_video');
      let feedbackListElement = document.getElementById('feedback_list');
      let timeIntervalElement = document.getElementById('time_interval');
      let feedbackList = [];
      sendHttpRequest('GET', 'http://' + server_url + '/get_feedback/<%= videoName %>', {}, null, (httpRequest) => {
        console.log('http request succeed!');
        feedbackList = JSON.parse(httpRequest.responseText).feedback;
        feedbackList.sort(compareFeedback);
        updateFeedbackList(feedbackList);
      });

      /* get list of feedback from server and update the feedback tab */
      function updateFeedbackList(feedbackList) {
        /* clear the feedback tab */
        $( feedbackListElement ).empty();

        for (let i = 0; i < feedbackList.length; i++) {
          let startTime = feedbackList[i].startTime;
          let startTimeText = '' + parseInt(startTime/60000) + ':' + parseInt((startTime%60000)/1000);

          /* add a new feedback to feedbackListElement */
          feedbackListElement.innerHTML += `<div class="panel panel-default" style="margin-bottom: 0">
            <div class="panel-body" role="tab">
              <h4 class="panel-title" style="vertical-align: center; display: -webkit-flex; display: flex">
                <span id="feedback_${ i }" style="cursor: pointer; -webkit-flex: 1; flex: 1">
                  By ${ feedbackList[i].userId }
                  <br>
                  ${ startTimeText + ' - ' + feedbackList[i].feedback }
                </span>
                <div>
                  <span id="question_for_feedback_${ i }" style="cursor: pointer; margin-right: 5px" data-toggle="modal" data-target="#new_notification_modal"><i class="fa fa-question-circle"></i></span>
                  <span style="cursor: pointer" data-toggle="collapse" href="#thread_feedback_${ i }" aria-expanded="true" aria-controls=""><i class="fa fa-angle-down" aria-hidden="true"></i></span>
                </div>
              </h4>
            </div>
            <div id="thread_feedback_${ i }" class="panel-collapse collapse" role="tabpanel">
              <div id="thread_feedback_body_${ i }"class="panel-body">
              </div>
            </div>
          </div>`

          /* if there are comments for the feedback, add it to #thread_feedback_body_(i) element */
          if (feedbackList[i].thread.length !== 0) {
            let threadFeedbackBodyElement = document.getElementById('thread_feedback_body_' + i);
            for (let j = 0; j < feedbackList[i].thread.length; j++) {
              let threadFeedbackElement = document.createElement('div');
              let threadFeedbackTextElement = document.createElement('span');
              threadFeedbackTextElement.innerHTML = feedbackList[i].thread[j].feedback;
              threadFeedbackElement.innerHTML = '<hr style="margin-top: 8px; margin-bottom: 8px">'
              threadFeedbackElement.appendChild(threadFeedbackTextElement);
              threadFeedbackElement.innerHTML += `<span id="question_for_feedback_${ i }_comment_${ j }" style="cursor: pointer; float: right" data-toggle="modal" data-target="#new_notification_modal"><i class="fa fa-question-circle"></i></span>`
              threadFeedbackElement.style.paddingLeft="20px";
              threadFeedbackElement.style.paddingRight="20px";
              threadFeedbackBodyElement.appendChild(threadFeedbackElement);
            }
          }
        }

        /* add onclicklistener for feedback text & '?' button */
        for (let i = 0; i < feedbackList.length; i++) {
          /* onclicklistener for feedback text */
          $('#feedback_' + i).click((e) => {
            videoElement.currentTime = feedbackList[i].startTime/1000;
          });

          /* onclicklistener for '?' button */
          $('#question_for_feedback_' + i).click((e) => {
            $('#target_feedback').html(feedbackList[i].feedback);
            $('#new_notification_submit_btn').off();
            $('#new_notification_submit_btn').click((e) => {
              e.preventDefault();
              sendHttpRequest('POST', 'http://' + server_url + '/send_notification/<%= videoName %>', {}, JSON.stringify({
                  feedback: feedbackList[i],
                  isComment: false,
                  commentIndex: -1,
                  question: $('#new_question').val()
                }),
                (httpRequest) => {
                  console.log('new notification request succeed!');
                  updateQuestionList();
                }
              );
              $('#new_question').val('');
            });
          });
          for (let j = 0; j < feedbackList[i].thread.length; j++) {
            $('#question_for_feedback_' + i + '_comment_' + j).click((e) => {
              $('#target_feedback').html(feedbackList[i].thread[j].feedback);
              $('#new_notification_submit_btn').off();
              $('#new_notification_submit_btn').click((e) => {
                e.preventDefault();
                sendHttpRequest('POST', 'http://' + server_url + '/send_notification/<%= videoName %>', {}, JSON.stringify({
                    feedback: feedbackList[i],
                    isComment: true,
                    commentIndex: j,
                    question: $('#new_question').val()
                  }),
                  (httpRequest) => {
                    console.log('new notification request succeed!');
                    updateQuestionList();
                  }
                );
                $('#new_question').val('');
              });
            });
          }
        }
      }

      /* function used to sort feedback list by time order */
      function compareFeedback(feedback1, feedback2) {
        if (feedback1.startTime < feedback2.startTime) return -1;
        else if (feedback1.startTime > feedback2.startTime) return 1;
        else {
          if (feedback1.endTime < feedback2.endTime) return -1;
          else if (feedback1.endTime > feedback2.endTime) return -1;
          else return 0;
        }
      }
    </script>
    <script type="text/javascript">
    /* initialize prompt tab */
    /* also, define updatePromptList, which get list of prompt from the server and refresh the prompt tab */
      updatePromptList();

      function updatePromptList() {
        let promptListElement = document.getElementById('prompt_list_body');
        while (promptListElement.hasChildNodes())
          promptListElement.removeChild(promptListElement.childNodes[0]);

        sendHttpRequest(
          'GET',
          'http://' + server_url + '/get_prompt/<%= videoName %>',
          {},
          null,
          (promptListRequest) => {
            console.log('prompt list request succeed!');

            let promptList = JSON.parse(promptListRequest.responseText).prompt;
            promptList.sort(comparePrompt);

            for (let i = 0; i < promptList.length; i++) {
              promptListElement.innerHTML += `<div class="panel panel-default" style="margin-bottom: 0">
                <div class="panel-body" role="tab">
                  <h4 class="panel-title">
                    ${ '' + parseInt(promptList[i].time/60000) + ':' + parseInt((promptList[i].time%60000)/1000) } - ${ promptList[i].question }
                    <a style="float: right" data-toggle="collapse" href="#prompt_detail_${ i }" aria-expanded="true" aria-controls=""><i class="fa fa-angle-down" aria-hidden="true"></i></a>
                  </h4>
                </div>
                <div id="prompt_detail_${ i }" class="panel-collapse collapse" role="tabpanel">
                  <div id="prompt_detail_body_${ i }" class="panel-body">
                    <p style="text-align: center">Answers</h5>
                  </div>
                </div>
              </div>`

              let promptDetailBodyElement = document.getElementById('prompt_detail_body_' + i);
              for (let j = 0; j < promptList[j].answers.length; j++) {
                let promptAnswerElement = document.createElement('p');
                promptAnswerElement.style.marginBottom = 5;
                promptAnswerElement.innerHTML = promptList[i].answers[j].answer;
                promptDetailBodyElement.appendChild(promptAnswerElement);
              }
            }
          }
        );
      }

      function comparePrompt(prompt1, prompt2) {
        if (prompt1.time < prompt2.time) return -1;
        else if (prompt1.time > prompt2.time) return 1;
        else return 0;
      }
    </script>
    <script type="text/javascript">
      /* initialize question tab */
      let questionListElement = document.getElementById('question_list');
      updateQuestionList();

      /* get question list from server and refresh question tab */
      function updateQuestionList() {
        while (questionListElement.hasChildNodes())
          questionListElement.removeChild(questionListElement.childNodes[0]);

        sendHttpRequest(
          'GET',
          'http://' + server_url + '/get_question/<%= videoName %>',
          {},
          null,
          (httpRequest) => {
            console.log('question list request succeed!');
            console.log(httpRequest.responseText);

            let questionList = JSON.parse(httpRequest.responseText).question;
            console.log(questionList);
            questionList.sort(compareQuestion);

            for (let i = 0; i < questionList.length; i++) {
              questionListElement.innerHTML += `<div class="panel panel-default" style="margin-bottom: 0">
                <div class="panel-body" role="tab">
                  <h4 class="panel-title">
                    question: ${ questionList[i].question }
                    <br>
                    feedback: ${ '' + parseInt(questionList[i].startTime/60000) + ':' + parseInt((questionList[i].startTime%60000)/1000) } - ${ questionList[i].feedback }
                    <a style="float: right" data-toggle="collapse" href="#question_detail_${ i }" aria-expanded="true" aria-controls=""><i class="fa fa-angle-down" aria-hidden="true"></i></a>
                  </h4>
                </div>
                <div id="question_detail_${ i }" class="panel-collapse collapse" role="tabpanel">
                  <div id="question_detail_body_${ i }" class="panel-body">
                    <p style="text-align: center">Answers</h5>
                  </div>
                </div>
              </div>`

              /* add question answer list */
              let questionDetailBodyElement = document.getElementById('question_detail_body_' + i);
              console.log(questionList.length);
              for (let j = 0; j < questionList[i].answers.length; j++) {
                console.log(questionList[i]);
                let questionAnswerElement = document.createElement('p');
                questionAnswerElement.style.marginBottom = 5;
                questionAnswerElement.innerHTML = questionList[i].answers[j].feedback;
                questionDetailBodyElement.appendChild(questionAnswerElement);
              }
            }
          }
        );
      }

      function compareQuestion(question1, question2) {
        if (question1.startTime < question2.startTime) return -1;
        else if (question1.startTime > question2.startTime) return 1;
        else return 0;
      }
    </script>
    <script type="text/javascript">
      /* set onclicklistener for feedback-prompt tab */
      $('#feedback_prompt_question_tab a').click(function(e) {
        e.preventDefault();
        $(this).tab('show');
      });
    </script>
    <script type="text/javascript">
      /* set onclicklisteners of modal for adding new prompt */

      /* prompt type tab */
      $('#new_prompt_type_tab a').click(function(e) {
        e.preventDefault();
        $(this).tab('show');
      });

      /* submit button */
      /* create a new prompt with the written text in #custom_question_prompt_question element */
      $('#new_prompt_submit_btn').click(function(e) {
        console.log('pressed');
        let promptType;
        if (document.getElementById('custom_question_tab').classList.contains('active')) promptType = 0;
        else if (document.getElementById('ab_testing_tab').classList.contains('active')) promptType = 1;
        else promptType = 2;
        let promptTime = Number($('#custom_question_prompt_time_min').val()) * 60000 + Number($('#custom_question_prompt_time_sec').val()) * 1000;

        sendHttpRequest('POST', 'http://' + server_url + '/new_prompt/<%= videoName %>', {},
          JSON.stringify({
            type: promptType,
            time: promptTime,
            question: $('#custom_question_prompt_question').val()
          }),
          (httpRequest) => {
            updatePromptList();
          }
        );
      });
    </script>
    <script>
      /* rendering chart */
      videoElement.addEventListener('loadedmetadata', function() {
        let ctx = document.getElementById("feedbackChart");
        let dataLabels = [];
        let dataData = [];
        let timeCnt = 0;
        let videoLength = Math.round(videoElement.duration*1000);
        let intervalNum = Math.round(videoLength / 30000);
        let timeInterval = Math.round(videoLength / intervalNum);

        /* counts # of feedback whose time interval overlaps with each point of chart */
        for (let i = 0; i <= intervalNum; i++) {
          let startTime = timeCnt - timeInterval/2;
          let endTime = timeCnt + timeInterval/2 < videoLength ? timeCnt + timeInterval/2 : videoLength;
          let feedbackCnt = 0;
          for (let i = 0; i < feedbackList.length; i++) {
            if (timeIntervalOverlap(startTime, endTime, feedbackList[i])) {
              feedbackCnt++;
            }
          }

          dataLabels.push('' + Math.floor(timeCnt/60000) + ':' + Math.floor((timeCnt%60000) / 1000));
          dataData.push(feedbackCnt);
          timeCnt += timeInterval;
        }

        /* draw chart */
        let myChart = new Chart(ctx, {
          type: 'line',
          data: {
              labels: dataLabels,
              datasets: [{
                  label: '# of Feedback',
                  data: dataData,
                  backgroundColor: 'rgba(255, 99, 132, 0.2)',
                  borderColor: 'rgba(255,99,132,1)',
                  borderWidth: 1,
                  pointRadius: 10,
                  pointHoverRadius: 12,
                  pointHitRadius: 10,
              }]
          },
          options: {
            onClick: onGraphClick,
            layout: {
              padding: {
                left: 50,
                right: 50,
                top: 0,
                bottom: 0
              }
            },
            scales: {
              xAxis: [{
                gridLines: {
                  display: false
                },
                type: 'time',
                time: {
                  displayFormats: {
                    second: 'mm:ss a'
                  }
                }
              }],
              yAxes: [{
                gridLines: {
                  display: false
                },
                ticks: {
                  beginAtZero:true
                }
              }]
            }
          }
        });

        function timeIntervalOverlap(startTime, endTime, feedback) {
          if ((startTime < feedback.startTime && endTime > feedback.endTime)
            || (startTime > feedback.startTime && startTime < feedback.endTime)
            || (endTime > feedback.startTime && endTime < feedback.endTime))
            return true;
          else return false;
        }

        function onGraphClick(event, elements) {
          console.log(event);
          console.log(elements);
          if (elements.length !== 0) {
            let chartElement = elements[0];
            let timeToGo = timeInterval * chartElement._index;
            videoElement.currentTime = timeToGo / 1000;
            function onTimeUpdateListener(e) {
              const currTimeToGo = timeToGo + 0;
              if (videoElement.currentTime * 1000 > currTimeToGo + timeInterval / 2
                || videoElement.currentTime * 1000 < currTimeToGo - timeInterval / 2) {
                timeIntervalElement.innerHTML = 'All';
                updateFeedbackList(feedbackList);
                videoElement.removeEventListener('timeupdate', onTimeUpdateListener);
              }
            }
          }
        }

        function getFeedbackForSection(index) {
          let startTime = timeInterval * index - timeInterval / 2;
          let endTime = timeInterval * index + timeInterval / 2;
          let feedbackForSection = [];
          for (let i = 0; i < feedbackList.length; i++) {
            if (timeIntervalOverlap(startTime, endTime, feedbackList[i])) {
              feedbackForSection.push(feedbackList[i]);
            }
          }

          return feedbackForSection;
        }
      });
    </script>
  </body>
</html>
